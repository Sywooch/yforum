<?php
/**
 * Created by PhpStorm.
 * User: noble4cc
 * Date: 16/5/31
 * Time: 下午2:48
 */

namespace frontend\modules\user\controllers;


use frontend\modules\user\models\AccountForm;
use frontend\modules\user\models\AvatarForm;
use Yii;
use common\components\Controller;
use common\models\UserInfo;
use yii\helpers\ArrayHelper;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use yii\web\Response;
use yii\widgets\ActiveForm;
class SettingController extends Controller
{
    /**
     * @return mixed
     */
    public function behaviors()
    {
        return ArrayHelper::merge(parent::behaviors(), [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'disconnect' => ['post']
                ],
            ],
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'actions' => ['profile', 'account', 'avatar', 'confirm', 'networks', 'connect', 'disconnect', 'donate'],
                        'roles' => ['@']
                    ],
                ]
            ],
        ]);
    }

    /**
     * 显示设置页面
     * @return string|\yii\web\Response
     */
    public function actionProfile()
    {
        $model=UserInfo::findOne(['user_id'=>Yii::$app->user->id]);
        if($model->load(Yii::$app->request->post())&&$model->save())
        {
            $this->flash('更新成功');
            return $this->refresh();
        }
        return $this->render('profile',['model'=>$model]);
    }

    /**
     * 用户账户
     * @return string|Response
     * @throws \yii\base\InvalidConfigException
     */
    public function actionAccount()
    {
        /** @var AccountForm $model */
        $model = Yii::createObject(AccountForm::className());

        $this->performAjaxValidation($model);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            Yii::$app->session->setFlash('success', '您的用户信息修改成功');
            return $this->refresh();
        }

        return $this->render('account', [
            'model' => $model,
        ]);
    }

    /**
     * 更改用户头像
     * @return string|Response
     * @throws \yii\base\InvalidConfigException
     */
    public function actionAvatar()
    {
        $model=Yii::createObject(AvatarForm::className());
        if($model->load(Yii::$app->request->post()))
        {
            if(Yii::$app->user->identity->avatar)
            {
                $model->deleteImage();
            }
            $error=true;
            $image=$model->uploadImage();
            if($image)
            {
                if($image->saveAs($model->getNewUploadedImageFile()))
                {
                    $error=false;
                }
            }
            if($error)
            {
                $model->useDefaultImage();
            }
            if(!$model->save())
            {
                $error=true;
            }
            if($error)
            {
                $this->flash('更新头像失败','error');
            }
            else
            {
                $this->flash('更新头像成功');
            }
            return $this->refresh();
        }
        return $this->render('avatar',['model'=>$model]);
    }
    public function actionDonate()
    {

    }
    public function actionNetworks()
    {

    }
    protected function performAjaxValidation($model)
    {
        if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            echo json_encode(ActiveForm::validate($model));
            Yii::$app->end();
        }
    }
    public function actions()
    {
        return [
            'connect' => [
                'class' => 'yii\authclient\AuthAction',
                'successCallback' => [$this, 'connect'],
            ]
        ];
    }
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        Yii::$app->set('authClientCollection', [
            'class' => 'yii\authclient\Collection',
            'clients' => [
                'google' => [
                    'class' => 'yii\authclient\clients\GoogleOAuth',
                    'clientId' => Yii::$app->setting->get('googleClientId'),
                    'clientSecret' => Yii::$app->setting->get('googleClientSecret'),
                ],
                'github' => [
                    'class' => 'yii\authclient\clients\GitHub',
                    'clientId' => Yii::$app->setting->get('githubClientId'),
                    'clientSecret' => Yii::$app->setting->get('githubClientSecret'),
                ],
            ],
        ]);
    }
}